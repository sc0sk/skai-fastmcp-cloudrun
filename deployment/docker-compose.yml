version: '3.8'

services:
  # Redis service for OAuth token persistence
  redis:
    image: redis:7.2-alpine
    container_name: hansard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - hansard-network

  # Hansard MCP server
  mcp-server:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: hansard-mcp-server
    ports:
      - "8080:8080"
    environment:
      # Server configuration
      PORT: 8080
      ENVIRONMENT: development
      LOG_LEVEL: INFO

      # Google Cloud configuration (use application default credentials)
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCP_REGION: ${GCP_REGION:-us-central1}

      # Cloud SQL configuration (local dev: use unix socket if available)
      CLOUDSQL_INSTANCE: ${CLOUDSQL_INSTANCE}
      CLOUDSQL_DATABASE: ${CLOUDSQL_DATABASE}
      CLOUDSQL_USER: ${CLOUDSQL_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-}

      # Vertex AI configuration
      VERTEX_AI_LOCATION: ${VERTEX_AI_LOCATION:-us-central1}

      # OAuth configuration (optional for local dev)
      DANGEROUSLY_OMIT_AUTH: ${DANGEROUSLY_OMIT_AUTH:-true}
      FASTMCP_SERVER_AUTH: ${FASTMCP_SERVER_AUTH:-}
      FASTMCP_SERVER_AUTH_GITHUB_CLIENT_ID: ${FASTMCP_SERVER_AUTH_GITHUB_CLIENT_ID:-}
      FASTMCP_SERVER_AUTH_GITHUB_CLIENT_SECRET: ${FASTMCP_SERVER_AUTH_GITHUB_CLIENT_SECRET:-}
      FASTMCP_SERVER_AUTH_GITHUB_BASE_URL: ${FASTMCP_SERVER_AUTH_GITHUB_BASE_URL:-http://localhost:8080}

      # OAuth token storage (development: use in-memory storage)
      # For production testing with Redis, uncomment these:
      # JWT_SIGNING_KEY: ${JWT_SIGNING_KEY}
      # TOKEN_ENCRYPTION_KEY: ${TOKEN_ENCRYPTION_KEY}
      # REDIS_HOST: redis
      # REDIS_PORT: 6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health').read()"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - hansard-network
    # Mount Google Cloud credentials if available
    volumes:
      - ${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}:/app/credentials.json:ro
    # Override credentials path if mounted
    command: >
      sh -c '
        if [ -f /app/credentials.json ]; then
          export GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
        fi
        python -m src.server
      '

volumes:
  redis_data:
    driver: local

networks:
  hansard-network:
    driver: bridge
